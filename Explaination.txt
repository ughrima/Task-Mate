### `TaskManagementAppApplication.java`

This class serves as the entry point for your Spring Boot application and performs some initial setup when the application starts.

#### Annotations

- `@SpringBootApplication`: This is a convenience annotation that adds all of the following:
  - `@Configuration`: Tags the class as a source of bean definitions for the application context.
  - `@EnableAutoConfiguration`: Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
  - `@ComponentScan`: Tells Spring to look for other components, configurations, and services in the `com/task/Task_Management_App` package.

#### Main Method

- `public static void main(String[] args)`: This is the entry point of the application. It calls `SpringApplication.run`, which launches the Spring Boot application.

#### CommandLineRunner

- `implements CommandLineRunner`: This interface indicates that a bean should run when it is contained within a SpringApplication. The `run` method is called after the application context is loaded and right before the Spring Boot application starts.

#### Dependency Injection

- `@Autowired`: This annotation is used for automatic dependency injection. It injects the `UserRepository` into this class.

#### `run` Method

- The `run` method is executed after the application starts.
- It checks if an admin account exists in the database by using the `UserRepository`.
- If an admin account does not exist, it creates a new admin user with a predefined username, email, and password.
- The password is encoded using `BCryptPasswordEncoder` for security.
- Finally, it saves the new user to the database using `userRepository.save(user)`.

### Explanation

- **Purpose**: The main purpose of this class is to start the Spring Boot application and perform any necessary initial setup, such as creating an admin account if it does not exist.
- **Security**: Using `BCryptPasswordEncoder` to encode the password ensures that passwords are stored securely in the database.
- **Initialization**: By implementing `CommandLineRunner`, it ensures that the `run` method is executed once the application context is fully loaded, which is useful for initializing data or performing setup tasks.

